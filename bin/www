#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('backend-crypto:server');
const http = require('http');
const socketIO = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
const io = socketIO(server);
io.of('/loggedin').on('connection', socket => {
  let {email, type} = socket.handshake.query;
  let cids = JSON.parse(socket.handshake.query.cids);

  console.log(`[${type}]: ${email} connected`);
  if(cids)
    cids.forEach(c => socket.join(c));
  if(type == 'admin')
    socket.join(process.env.secretKey);

  socket.on('join-me', data => {
    socket.join(data.cid);
  });

  socket.on('new-question-added', data => {
      socket.to(data.cid).emit('new-question-added-info',data);
  });

  socket.on('new-question-added2', data => {
      socket.to(process.env.secretKey).emit('new-question-added-info2',data);
  });

  socket.on('contest-edited', data => {
    socket.to(data.cid).emit('contest-edited-info',data);
  });

  socket.on('question-edited', data => {
    socket.to(process.env.secretKey).emit('question-edited-info',data);
  });

  socket.on('new-contest-added', data => {
    socket.join(data.cid);
    socket.to(process.env.secretKey).emit('new-contest-added-info',data);
  });

  socket.on('allowed-users', data => {
    io.of('/loggedin').emit('allowed-users-info',data);
  });

  socket.on('discussion', data => {
    socket.to(data.cid).emit('discussion-info',data);
  });

  socket.on('announcement', data => {
    socket.to(data.cid).emit('announcement-info',data);
  });

  socket.on('disconnect', () => { 
    console.log(`[${type}]: ${email} disconnected`);
  });
});
io.of('/tcs').on('connection', socket => {
  console.log(`Client connected`);
    
  socket.on('force-reload-init', () => { 
    io.of('/tcs').emit(`force-reload-execute`);
  });
    
  socket.on('disconnect', () => { 
    console.log(`Client disconnected`);
  });
});
setInterval(() => io.of('/tcs').emit('time-info',new Date().toString()), parseInt(process.env.PING_INTERVAL)*1000);
global.io = io;

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
console.log("Server started on port",port);
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
